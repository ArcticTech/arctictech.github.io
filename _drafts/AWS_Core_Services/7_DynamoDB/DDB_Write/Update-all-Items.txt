import json
import boto3
import decimal
from datetime import datetime
from boto3.dynamodb.conditions import Key as dynamoKey

class DynamoPaginatedScanner:
	"""Scans dynamodb data with pagination."""

	@classmethod
	def _scan_pagination_wrapper(self, target, **kwargs):
		"""Handles scans of data over 1mb.
		https://stackoverflow.com/a/38619425/."""

		response = target.scan(**kwargs)
		data = []
		if 'Items' in response:
			data.extend(self._replace_decimals(response['Items']))
		while response.get('LastEvaluatedKey'):
			response = target.scan(ExclusiveStartKey=response['LastEvaluatedKey'], **kwargs)
			if 'Items' in response:
				data.extend(self._replace_decimals(response['Items']))
		return data

	@classmethod
	def _replace_decimals(self, obj):
		"""Helper function replaces Decimal() and Binary() objects.
		https://github.com/boto/boto3/issues/369/."""

		if isinstance(obj, list):
			for i in range(len(obj)):
				obj[i] = self._replace_decimals(obj[i])
			return obj
		elif isinstance(obj, dict):
			for k in obj.keys():
				obj[k] = self._replace_decimals(obj[k])
			return obj
		elif isinstance(obj, decimal.Decimal):
			if obj % 1 == 0:
				return int(obj)
			else:
				return float(obj)
		else:
			return obj

	@classmethod
	def pscan(self, table, fields=[]):
		"""fields = ['timestampUnix', 'ddbuuid']"""

		if len(fields) >= 1:
			pe = ', '.join(fields)
			return self._scan_pagination_wrapper(table,
				ProjectionExpression=pe)
		else:
			return self._scan_pagination_wrapper(table)

def lambda_handler(event, context):

	dynamodb = boto3.resource('dynamodb', 'us-east-1')
	table = dynamodb.Table('my_test_table')
	ddbscanner = DynamoPaginatedScanner()

	search_fields = ['timestampUnix', 'ddbuuid']

	items = ddbscanner.pscan(table, search_fields)

	attType = '#s'
	attName = 'patreon_status'
	attValue = ''

	for item in items:
		response = table.update_item(
			Key=item,
			UpdateExpression='SET {} = :{}'.format(attType, attName),
			ExpressionAttributeNames={
				attType : attName},
			ExpressionAttributeValues={
				':{}'.format(attName) : attValue})

	return {'statusCode': 200,'body': json.dumps('Successfully Updated.')}
